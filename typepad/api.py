# Copyright (c) 2009-2010 Six Apart Ltd.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of Six Apart Ltd. nor the names of its contributors may
#   be used to endorse or promote products derived from this software without
#   specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

"""

The `typepad.api` module contains `TypePadObject` implementations of all the
content objects provided in the TypePad API.

"""

from urlparse import urljoin

from remoteobjects.dataobject import find_by_name

from typepad.tpobject import *
from typepad import fields
import typepad


class Account(TypePadObject):

    """A user account on an external website."""

    crosspostable = fields.Field()
    """Whether the service can be crossposted to."""
    domain = fields.Field()
    """The DNS domain of the site that the account belongs to."""
    id = fields.Field()
    """A URI that serves as a globally-unique id for the account."""
    provider_icon_url = fields.Field(api_name='providerIconURL')
    """The URL of a 16x16 pixel icon that represents the service provider of this account."""
    provider_name = fields.Field(api_name='providerName')
    """A human-friendly name of the service provider of this account."""
    provider_url = fields.Field(api_name='providerURL')
    """The URL of the home page of the service provider of this account."""
    url = fields.Field()
    """The URL of the user's profile page or some other primary page on the remote site, if known."""
    user_id = fields.Field(api_name='userId')
    """The non-user-friendly id or primary key for the account, if known. (Some sites only have a username.)"""
    username = fields.Field()
    """The username of the account, if known. (Some sites only have a userId.)"""


class ApiKey(TypePadObject):

    api_key = fields.Field(api_name='apiKey')
    """The actual API key string, which is used as the consumer key when making an OAuth request."""
    owner = fields.Object('Application')
    """The application that owns this API key."""

    def make_self_link(self):
        return urljoin(typepad.client.endpoint, '/api-keys/%s.json' % self.api_key)

    @classmethod
    def get_by_api_key(cls, api_key):
        """Returns an `ApiKey` instance with the given consumer key.

        Asserts that the api_key parameter matches ^\w+$."""
        assert re.match('^\w+$', api_key), "invalid api_key parameter given"
        return cls.get('/api-keys/%s.json' % api_key)


class Asset(TypePadObject):

    """An item of content generated by a user."""

    object_type = "tag:api.typepad.com,2009:Asset"

    known_object_types = [
        "tag:api.typepad.com,2009:Post",
        "tag:api.typepad.com,2009:Photo",
        "tag:api.typepad.com,2009:Video",
        "tag:api.typepad.com,2009:Audio",
        "tag:api.typepad.com,2009:Link",
        "tag:api.typepad.com,2009:Comment",
        "tag:api.typepad.com,2009:Document"
    ]

    author = fields.Object('User')
    """The user that created the selected asset."""
    categories = fields.List(fields.Field())
    """A list categories (strings) associated with the asset."""
    comment_count = fields.Field(api_name='commentCount')
    """The number of comments that have been posted in the comment tree beneath this asset."""
    comments = fields.Link(ListOf('Asset'))
    content = fields.Field()
    """The raw asset content. The C<textFormat> property defines what format this data is in."""
    crosspost_accounts = fields.List(fields.Field(), api_name='crosspostAccounts')
    """A list of elsewhere account IDs to crosspost to."""
    favorite_count = fields.Field(api_name='favoriteCount')
    """The number of distinct users who have added this asset as a favorite."""
    favorites = fields.Link(ListOf('Favorite'))
    groups = fields.List(fields.Field())
    id = fields.Field()
    """A URI that serves as a globally-unique id for the user. This can be used to recognise where the same user is returned in response to different requests, and as a mapping key for an application's local data store."""
    in_reply_to = fields.Object('AssetRef', api_name='inReplyTo')
    """For comment `Asset` instances, an `AssetRef` describing the asset on
    which this instance is a comment."""
    permalink_url = fields.Field(api_name='permalinkUrl')
    """The URL which is considered to be this asset's permalink. This might be C<null> if the asset does not have a permalink of its own (for example, if it's embedded in another asset), or if TypePad does not know its permalink."""
    published = fields.Datetime()
    """The time that the asset was created, as an L<http://www.ietf.org/rfc/rfc3339.txt|RFC3339> timestamp."""
    rendered_content = fields.Field(api_name='renderedContent')
    """The content of this asset rendered to HTML. This is currently available only for O<Post> and O<Page> assets."""
    source = fields.Object('AssetSource')
    """An object describing the site from which this asset was retrieved, for assets obtained from external feeds."""
    status = fields.Object('PublicationStatus')
    """The `PublicationStatus` describing the state of the `Asset`."""
    summary = fields.Field()
    """For a media type of `Asset`, the HTML description or caption given by
    its author."""
    text_format = fields.Field(api_name='textFormat')
    """A keyword which indicates what formatting mode is used for the content of this asset. This can currently be "html" for assets whose content is HTML, "html_convert_linebreaks" for assets whose content is HTML with paragraph tags added automatically, or "markdown" for assets whose content is Markdown. Other formatting modes may be added in future. Applications which present assets for editing should use this property to present an appropriate editor."""
    title = fields.Field()
    """The title of the asset."""
    updated = fields.Datetime()
    """A `datetime.datetime` indicating when the `Asset` was last modified."""
    url_id = fields.Field(api_name='urlId')
    """A string containing the canonical identifier that can be used as the "id" for this object in URLs. However, this should not be used as a database key to avoid collisions when an application is switched to a different backend server; use the "id" property instead."""

    def make_self_link(self):
        return urljoin(typepad.client.endpoint, '/assets/%s.json' % self.url_id)

    @classmethod
    def get_by_url_id(cls, url_id, **kwargs):
        """Returns an `Asset` instance by the url id for the asset.

        Asserts that the url_id parameter matches ^\w+$."""
        assert re.match('^\w+$', url_id), "invalid url_id parameter given"
        a = cls.get('/assets/%s.json' % url_id, **kwargs)
        a.__dict__['url_id'] = url_id
        a.__dict__['id'] = 'tag:api.typepad.com,2009:%s' % url_id
        return a

    @property
    def actor(self):
        """This asset's author.

        This alias lets us use `Asset` instances interchangeably with `Event`
        instances in templates.
        """
        return self.author

    @property
    def asset_ref(self):
        """An `AssetRef` instance representing this asset."""
        return AssetRef(url_id=self.url_id,
                        ref=self.id,
                        author=self.author,
                        href='/assets/%s.json' % self.url_id,
                        type='application/json',
                        object_types=self.object_types)

    def __unicode__(self):
        return self.title or self.summary or self.content

    def primary_object_type(self):
        if not self.object_types: return None
        for object_type in self.object_types:
            if object_type in self.known_object_types: return object_type
        return None


class AssetRef(TypePadObject):

    """A structure that refers to an asset without including its full
    content."""

    author = fields.Object('User')
    """The user that created the selected asset."""
    href = fields.Field()
    """The URL at which a representation of the corresponding asset can be retrieved."""
    ref = fields.Field()
    """A URI that uniquely identifies the referenced `Asset`.

    The URI matches the one in the referenced `Asset` instance's ``id``
    field.

    """
    type = fields.Field()
    """The MIME type of the representation at the URL given in the "href" property."""
    url_id = fields.Field(api_name='urlId')
    """A string containing the canonical identifier that can be used as the "id" for this object in URLs. However, this should not be used as a database key to avoid collisions when an application is switched to a different backend server such as the development server; use the "id" property instead. This matchies the "urlId" propert in the corresponding asset."""

    def reclass_for_data(self, data):
        """Returns ``False``.

        This method prevents `AssetRef` instances from being reclassed when
        updated from a data dictionary based on the dictionary's
        ``objectTypes`` member.

        """
        # AssetRefs are for any object type, so don't reclass them.
        return False


class AssetSource(TypePadObject):

    """Information about an `Asset` instance imported from another service."""

    by_user = fields.Field(api_name='byUser')
    """T<Deprecated> C<true> if this content is considered to be created by its author, or C<false> if it's actually someone else's content imported by the asset author."""
    permalink_url = fields.Field(api_name='permalinkUrl')
    """The URL which is considered to be this asset source's permalink."""
    provider = fields.Dict(fields.Field())
    """T<Deprecated> Description of the external service provider from which this content was imported. Contains "name", "icon", and "uri" properties."""
    source = fields.Field()


class AudioLink(TypePadObject):

    """A link to an audio recording."""

    duration = fields.Field()
    """An optional property representing the duration of the audio stream in seconds, if known."""
    url = fields.Field()
    """The URL for an MP3 representation of the audio stream."""


class AuthToken(TypePadObject):

    auth_token = fields.Field(api_name='authToken')
    """The actual auth token string, which is used as the access token when making an OAuth request."""
    target = fields.Object('TypePadObject', api_name='targetObject')
    """T<Deprecated> The root object to which this auth token grants access. This is a legacy field maintained for backwards compatibility with older clients. Auth tokens are no longer scoped to specific objects, so this value will be meaningless in any case except those where a specific object is returned to preserve some client behavior."""

    def make_self_link(self):
        # TODO: We don't have the API key, so we can't build a self link.
        return

    @classmethod
    def get_by_key_and_token(cls, api_key, auth_token):
        return cls.get('/auth-tokens/%s:%s.json' % (api_key, auth_token))


class Event(TypePadObject):

    """An action that a user or group did.

    An event has an `actor`, which is the user or group that did the action; a
    set of `verbs` that describe what kind of action occured; and an `object`
    that is the object that the action was done to. In the current TypePad API
    implementation, only assets, users and groups can be the object of an
    event.

    """

    actor = fields.Object('TypePadObject')
    """The user that did the action that the event describes."""
    id = fields.Field()
    """A URI that serves as a globally-unique id for the user. This can be used to recognise where the same user is returned in response to different requests, and as a mapping key for an application's local data store."""
    object = fields.Object('TypePadObject')
    """The object that the action was done to."""
    published = fields.Datetime()
    url_id = fields.Field(api_name='urlId')
    """A string containing the canonical identifier that can be used as the "id" for this object in URLs. However, this should not be used as a database key to avoid collisions when an application is switched to a different backend server; use the "id" property instead."""
    verbs = fields.List(fields.Field())
    """An array of verb identifier URIs. At the present time, only one verb is returned, but this may be extended in future. Clients should scan this list and ignore any verbs that are not recognised. This list also includes appropriate verb URIs as defined by the ActivityStrea.ms schema specification."""

    def __unicode__(self):
        return unicode(self.object)

    def make_self_link(self):
        return urljoin(typepad.client.endpoint, '/events/%s.json' % self.url_id)


class Favorite(Asset):

    """A favorite of some other asset.

    Asserts that the user_id and asset_id parameter match ^\w+$."""

    object_type = "tag:api.typepad.com,2009:Favorite"

    @classmethod
    def get_by_user_asset(cls, user_id, asset_id, **kwargs):
        assert re.match('^\w+$', user_id), "invalid user_id parameter given"
        assert re.match('^\w+$', asset_id), "invalid asset_id parameter given"
        return cls.get('/favorites/%s:%s.json' % (asset_id, user_id),
            **kwargs)

    @classmethod
    def head_by_user_asset(cls, *args, **kwargs):
        fav = cls.get_by_user_asset(*args, **kwargs)
        return fav.head()


class ImageLink(TypePadObject, _ImageResizer):

    """A link to an image.

    Images hosted by TypePad can be resized with image sizing specs. See
    the `url_template` field and `at_size` method.

    """

    height = fields.Field()
    """The height of the original image in pixels. Omitted if TypePad does not know the dimensions of this image, for example if the image is not actually hosted on TypePad itself."""
    url = fields.Field()
    """The URL for the original (full-size) version of this image."""
    url_template = fields.Field(api_name='urlTemplate')
    """If TypePad is able to provide a scaled version of this image, a URL template which uses the placeholder C<{spec}> to represent where to place a sizing spec as described above. Omitted if TypePad is unable to provide a scaled version of this image, for example if the image is not actually hosted on TypePad itself."""
    width = fields.Field()
    """The width of the original image in pixels. Omitted if TypePad does not know the dimensions of this image, for example if the image is not actually hosted on TypePad itself."""

    @property
    def href(self):
        import logging
        logging.getLogger("typepad.api").warn(
            '%s.href is deprecated; use %s.url instead' % (self.__class__.__name__, self.__class__.__name__))
        return self.url


class PublicationStatus(TypePadObject):

    """A container for the flags that represent an asset's publication status.

    Publication status is currently represented by two flags: published and
    spam. The published flag is false when an asset is held for moderation,
    and can be set to true to publish the asset. The spam flag is true when
    TypePad's spam filter has determined that an asset is spam, or when the
    asset has been marked as spam by a moderator.

    """

    published = fields.Field()
    """C<true> if this asset is private, C<false> otherwise"""
    spam = fields.Field()
    """Represents an asset's publication date (past or future)"""


class Relationship(TypePadObject):

    """The unidirectional relationship between a pair of entities.

    A Relationship can be between a user and a user (a contact relationship),
    or a user and a group (a membership). In either case, the relationship's
    status shows *all* the unidirectional relationships between the source and
    target entities.

    """

    created = fields.Dict(fields.Datetime())
    id = fields.Field()
    """A URI that serves as a globally-unique id for the relationship. This can be used to recognise where the same relationship is returned in response to different requests, and as a mapping key for an application's local data store."""
    source = fields.Object('TypePadObject')
    """The source entity, the 'subject' of the relationship."""
    status = fields.Object('RelationshipStatus')
    """A RelationshipStatus object describing the types of relationship that currently exist between the source and the target."""
    status_obj = fields.Link(RelationshipStatus, api_name='status')
    """A `RelationshipStatus` describing the types of relationship this
    `Relationship` instance represents.

    Unlike the `RelationshipStatus` instance in the `status` field, this
    linked `RelationshipsStatus` instance can be updated through ``POST``
    requests.

    """
    target = fields.Object('TypePadObject')
    """The target entity, the 'object' of the relationship."""
    url_id = fields.Field(api_name='urlId')
    """A string containing the canonical identifier that can be used as the "id" for this object in URLs. However, this should not be used as a database key to avoid collisions when an application is switched to a different backend server; use the "id" property instead."""

    def make_self_link(self):
        return urljoin(typepad.client.endpoint, '/relationships/%s.json' % self.url_id)

    def _rel_type_updater(uri):
        def update(self):
            rel_status = RelationshipStatus.get(self.status_obj._location, batch=False)
            if uri:
                rel_status.types = [uri]
            else:
                rel_status.types = []
            rel_status.put()
        return update

    block = _rel_type_updater("tag:api.typepad.com,2009:Blocked")
    unblock = _rel_type_updater(None)
    leave = _rel_type_updater(None)

    def _rel_type_checker(uri):
        def has_edge_with_uri(self):
            return uri in self.status.types
        return has_edge_with_uri

    is_member = _rel_type_checker("tag:api.typepad.com,2009:Member")
    is_admin = _rel_type_checker("tag:api.typepad.com,2009:Admin")
    is_blocked = _rel_type_checker("tag:api.typepad.com,2009:Blocked")


class RelationshipStatus(TypePadObject):

    """A representation of just the relationship types of a relationship,
    without the associated endpoints."""

    types = fields.List(fields.Field())
    """A list of strings containing relationship type URIs."""


class UserProfile(TypePadObject):

    """Additional profile information about a TypePad user.

    This additional information is useful when showing information about a
    TypePad account directly, but is generally not required when linking to
    an ancillary TypePad account, such as the author of a post.

    """

    about_me = fields.Field(api_name='aboutMe')
    """The long-form description or bio, as a free-form string provided by the user."""
    avatar_link = fields.Object('ImageLink', api_name='avatarLink')
    """Link to this user's avatar (userpic) image."""
    display_name = fields.Field(api_name='displayName')
    """The user's chosen display name."""
    email = fields.Field()
    follow_frame_content_url = fields.Field(api_name='followFrameContentUrl')
    """URL of a page which can be rendered in an iframe to produce a widget through which the remote user can follow this user. Should be rendered in an iframe that's 300 pixels wide and 125 pixels high."""
    gender = fields.Field()
    homepage_url = fields.Field(api_name='homepageUrl')
    """URL that the user has specified as an external website URL. C<null> if the user has not provided a website URL."""
    id = fields.Field()
    """A URI that uniquely identifies the `User` associated with this `UserProfile`."""
    interests = fields.List(fields.Field())
    """A list of interests provided by the user and displayed on the user's profile page."""
    location = fields.Field()
    """The location of the user, as a free-form string provided by the user."""
    membership_management_page_url = fields.Field(api_name='membershipManagementPageUrl')
    """URL of a page at which this user can manage group memberships. This is present only if the remote user has access to do this."""
    preferred_username = fields.Field(api_name='preferredUsername')
    """The name the user has chosen for use in his TypePad Profile URL. This can be used as the id in the URL to select this user, though it must not be used as a persistent key since it can be changed by the user at any time."""
    profile_edit_page_url = fields.Field(api_name='profileEditPageUrl')
    """URL of a page at which this user can edit the profile information attached to the user account. This is present only if the remote user has access to do this."""
    profile_page_url = fields.Field(api_name='profilePageUrl')
    """URL of the user's profile page."""
    url_id = fields.Field(api_name='urlId')
    """An identifier for this `UserProfile` that can be used in URLs.

    A user's `url_id` is unique only across groups in one TypePad
    environment, so you should use `id`, not `url_id`, to associate data
    with a `User` (or `UserProfile`). When constructing URLs to API resources
    in one particular TypePad environment, however, use `url_id`.

    """

    def make_self_link(self):
        return urljoin(typepad.client.endpoint, '/users/%s/profile.json' % self.url_id)

    @classmethod
    def get_by_url_id(cls, url_id, **kwargs):
        """Returns the `UserProfile` instance with the given URL identifier."""
        prof = cls.get('/users/%s/profile.json' % url_id, **kwargs)
        prof.__dict__['url_id'] = url_id
        return prof

    @property
    def user(self):
        """Returns a `User` instance for the TypePad member whose
        `UserProfile` this is."""
        return find_by_name('User').get_by_url_id(self.url_id)


class VideoLink(TypePadObject):

    """A link to a web video."""

    embed_code = fields.Field(api_name='embedCode')
    """An opaque HTML fragment which, when embedded in a HTML page, will provide an inline player for the video."""
    permalink_url = fields.Field(api_name='permalinkUrl')
    """A URL to the HTML permalink page of the video.

    Use this field to specify the video when posting a new `Video` asset.
    When requesting an existing `Video` instance from the API,
    `permalink_url` will be ``None``.

    """

    _width = None
    _height = None

    def get_width(self):
        if self._width is None:
            match = re.search('\swidth="(\d+)"', self.embed_code)
            if match:
                self._width = int(match.group(1))
        return self._width

    def get_height(self):
        if self._height is None:
            match = re.search('\sheight="(\d+)"', self.embed_code)
            if match:
                self._height = int(match.group(1))
        return self._height

    def set_width(self, width):
        self._width = width
        self._update_embed()

    def set_height(self, height):
        self._height = height
        self._update_embed()

    width = property(get_width, set_width)
    height = property(get_height, set_height)

    def _update_embed(self):
        self.embed_code = re.sub('(\swidth=)"\d+"', '\\1"%d"' % self.width, self.embed_code)
        self.embed_code = re.sub('(\sheight=)"\d+"', '\\1"%d"' % self.height, self.embed_code)

    # selection algorithm to scale to fit width
    def by_width(self, size):
        """Given a size, return a `VideoLink` of a video that is as wide
        as the requested size.

        This mode scales the video such that the width is the size specified
        and the height is scaled to maintain the video's aspect ratio.

        """
        vid = copy(self)
        vid.width = size
        vid.height = int(self.height * (size / float(self.width)))
        return vid

    @property
    def html(self):
        import logging
        logging.getLogger("typepad.api").warn(
            '%s.html is deprecated; use %s.embed_code instead' % (self.__class__.__name__, self.__class__.__name__))
        return self.embed_code


class Application(TypePadObject):

    """An application that can authenticate to the TypePad API using OAuth.

    An application is identified by its OAuth consumer key, which in the case
    of a hosted group is the same as the identifier for the group itself.

    """

    object_type = "tag:api.typepad.com,2009:Application"

    id = fields.Field()
    """A URI that serves as a globally-unique id for the object. This can be used to recognise where the same user is returned in response to different requests, and as a mapping key for an application's local data store."""
    name = fields.Field()
    """The name of the application as provided by its developer."""
    oauth_access_token_url = fields.Field(api_name='oauthAccessTokenUrl')
    """The URL of the OAuth access token endpoint for this application."""
    oauth_authorization_url = fields.Field(api_name='oauthAuthorizationUrl')
    """The URL to send the user's browser to for the user authorization step."""
    oauth_identification_url = fields.Field(api_name='oauthIdentificationUrl')
    """The URL to send the user's browser to identify which user is logged in (the "signin" link)."""
    oauth_request_token_url = fields.Field(api_name='oauthRequestTokenUrl')
    """The URL of the OAuth request token endpoint for this application."""
    session_sync_script_url = fields.Field(api_name='sessionSyncScriptUrl')
    """The URL of the session sync script."""
    signout_url = fields.Field(api_name='signoutUrl')
    """The URL to send the user's browser to in order to sign out of TypePad."""
    url_id = fields.Field()
    """A string containing the canonical identifier that can be used as the "id" for this object in URLs. However, this should not be used as a database key to avoid collisions when an application is switched to a different backend server; use the "id" property instead."""
    user_flyouts_script_url = fields.Field(api_name='userFlyoutsScriptUrl')
    """The URL of a script to embed to enable the user flyouts functionality."""

    @property
    def browser_upload_endpoint(self):
        """The endpoint to use for uploading file assets directly to
        TypePad."""
        return urljoin(typepad.client.endpoint, '/browser-upload.json')

    def make_self_link(self):
        return urljoin(typepad.client.endpoint, '/applications/%s.json' % self.url_id)

    @classmethod
    def get_by_api_key(cls, api_key, **kwargs):
        """Returns an `Application` instance by the API key.

        Asserts that the api_key parameter matches ^\w+$."""
        assert re.match('^\w+$', api_key), "invalid api_key parameter given"
        import logging
        logging.getLogger("typepad.api").warn(
            '%s.get_by_api_key is deprecated' % cls.__name__)
        return cls.get('/applications/%s.json' % api_key, **kwargs)

    @property
    def user_flyouts_script(self):
        import logging
        logging.getLogger("typepad.api").warn(
            '%s.user_flyouts_script is deprecated; use %s.user_flyouts_script_url instead' % (self.__class__.__name__, self.__class__.__name__))
        return self.user_flyouts_script_url


class Audio(Asset):

    """An entry in a blog."""

    object_type = "tag:api.typepad.com,2009:Audio"

    audio_link = fields.Object('AudioLink', api_name='audioLink')
    """A link to the actual audio stream that provides the primary content for this asset."""


class Comment(Asset):

    """A text comment posted in reply to some other asset."""

    object_type = "tag:api.typepad.com,2009:Comment"


class Group(TypePadObject):

    """A group that users can join, and to which users can post assets.

    TypePad API social applications are represented as groups.

    """

    object_type = "tag:api.typepad.com,2009:Group"

    assets = fields.Link(ListOf('Asset'))
    audio_assets = fields.Link(ListOf('Audio'), api_name='audio-assets')
    comments = fields.Link(ListOf('Asset'))
    display_name = fields.Field(api_name='displayName')
    """The display name set by the group's owner."""
    events = fields.Link(ListOf('Event'))
    id = fields.Field()
    """A URI that serves as a globally-unique id for the object. This can be used to recognise where the same user is returned in response to different requests, and as a mapping key for an application's local data store."""
    link_assets = fields.Link(ListOf('Link'), api_name='link-assets')
    memberships = fields.Link(ListOf('Relationship'))
    photo_assets = fields.Link(ListOf('Photo'), api_name='photo-assets')
    post_assets = fields.Link(ListOf('Post'), api_name='post-assets')
    tagline = fields.Field()
    """A tagline describing the group, set by the group's owner."""
    urls = fields.List(fields.Field())
    url_id = fields.Field(api_name='urlId')
    """A string containing the canonical identifier that can be used as the "id" for this object in URLs. However, this should not be used as a database key to avoid collisions when an application is switched to a different backend server; use the "id" property instead."""
    video_assets = fields.Link(ListOf('Video'), api_name='video-assets')

    def make_self_link(self):
        return urljoin(typepad.client.endpoint, '/groups/%s.json' % self.url_id)

    @classmethod
    def get_by_url_id(cls, url_id, **kwargs):
        """Returns a `Group` instance by the group's url identifier.

        Asserts that the url_id parameter matches ^\w+$."""
        assert re.match('^\w+$', url_id), "invalid url_id parameter given"
        g = cls.get('/groups/%s.json' % url_id, **kwargs)
        g.__dict__['url_id'] = url_id
        return g


class Link(Asset):

    """A shared link to some URL."""

    object_type = "tag:api.typepad.com,2009:Link"

    target_url = fields.Field(api_name='targetUrl')
    """The URL that is the target of this link."""


class Photo(Asset):

    """An entry in a blog."""

    object_type = "tag:api.typepad.com,2009:Photo"

    image_link = fields.Object('ImageLink', api_name='imageLink')
    """A link to the image that this Photo asset represents."""


class Post(Asset):

    """An entry in a blog."""

    object_type = "tag:api.typepad.com,2009:Post"


class User(TypePadObject):

    """A TypePad user.

    This includes those who own TypePad blogs, those who use TypePad Connect
    and registered commenters who have either created a TypePad account or
    signed in with OpenID.

    """

    object_type = "tag:api.typepad.com,2009:User"

    avatar_link = fields.Object('ImageLink', api_name='avatarLink')
    """Link to this user's avatar (userpic) image."""
    comments = fields.Link(ListOf('Comment'), api_name='comments-sent')
    display_name = fields.Field(api_name='displayName')
    """The user's chosen display name."""
    elsewhere_accounts = fields.Link(ListOf('Account'), api_name='elsewhere-accounts')
    email = fields.Field()
    events = fields.Link(ListOf('Event'))
    favorites = fields.Link(ListOf('Favorite'))
    gender = fields.Field()
    id = fields.Field()
    """A URI that serves as a globally-unique id for the object. This can be used to recognise where the same user is returned in response to different requests, and as a mapping key for an application's local data store."""
    memberships = fields.Link(ListOf('Relationship'))
    notifications = fields.Link(ListOf('Event'))
    preferred_username = fields.Field(api_name='preferredUsername')
    """The name the user has chosen for use in his TypePad Profile URL. This can be used as the id in the URL to select this user, though it must not be used as a persistent key since it can be changed by the user at any time."""
    profile_page_url = fields.Field(api_name='profilePageUrl')
    """URL of the user's profile page."""
    relationships = fields.Link(ListOf('Relationship'))
    url_id = fields.Field(api_name='urlId')
    """A string containing the canonical identifier that can be used as the "id" for this object in URLs. However, this should not be used as a database key to avoid collisions when an application is switched to a different backend server; use the "id" property instead."""

    def make_self_link(self):
        return urljoin(typepad.client.endpoint, '/users/%s.json' % self.url_id)

    @classmethod
    def get_self(cls, **kwargs):
        """Returns a `User` instance representing the account as whom the
        client library is authenticating."""
        return cls.get('/users/@self.json', **kwargs)

    @classmethod
    def get_by_url_id(cls, url_id, **kwargs):
        """Returns a `User` instance by their url identifier.

        Profile URL identifiers must contain only letters, numbers, and
        underscores.

        """
        if len(url_id) == 0:
            raise ValueError('URL identifiers must contain some characters')
        mo = re.search('\W', url_id)
        if mo:
            raise ValueError('URL identifiers cannot contain "%s" characters'
                             % mo.group(0))
        u = cls.get('/users/%s.json' % url_id, **kwargs)
        u.__dict__['url_id'] = url_id
        return u


class Video(Asset):

    """An entry in a blog."""

    object_type = "tag:api.typepad.com,2009:Video"

    preview_image_link = fields.Object('ImageLink', api_name='previewImageLink')
    """A link to an image which serves as a preview or poster frame for this video. Might be C<null> if such an image is not available."""
    video_link = fields.Object('VideoLink', api_name='videoLink')
    """A link to the actual video that provides the primary content for this asset."""


browser_upload = BrowserUploadEndpoint()
