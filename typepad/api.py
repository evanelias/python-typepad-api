# Copyright (c) 2009-2010 Six Apart Ltd.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of Six Apart Ltd. nor the names of its contributors may
#   be used to endorse or promote products derived from this software without
#   specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

"""

The `typepad.api` module contains `TypePadObject` implementations of all the
content objects provided in the TypePad API.

"""

from urlparse import urljoin

from remoteobjects.dataobject import find_by_name

from typepad.tpobject import *
from typepad.tpobject import _ImageResizer, _VideoResizer
from typepad import fields
import typepad


class Account(TypePadObject):

    """A user account on an external website."""

    crosspostable = fields.Field()
    """True if this account supports crossposting and the user has enabled it, or
    false otherwise."""
    domain = fields.Field()
    """The DNS domain of the site that the account belongs to."""
    id = fields.Field()
    """A URI that serves as a globally-unique id for the account."""
    provider_icon_url = fields.Field(api_name='providerIconURL')
    """The URL of a 16x16 pixel icon that represents the service provider of this
    account."""
    provider_name = fields.Field(api_name='providerName')
    """A human-friendly name of the service provider of this account."""
    provider_url = fields.Field(api_name='providerURL')
    """The URL of the home page of the service provider of this account."""
    url = fields.Field()
    """The URL of the user's profile page or some other primary page on the remote
    site, if known."""
    user_id = fields.Field(api_name='userId')
    """The non-user-friendly id or primary key for the account, if known.

    (Some sites only have a username.)

    """
    username = fields.Field()
    """The username of the account, if known.

    (Some sites only have a userId.)

    """


class ApiKey(TypePadObject):

    api_key = fields.Field(api_name='apiKey')
    """The actual API key string, which is used as the consumer key when making an
    OAuth request."""
    owner = fields.Object('Application')
    """The application that owns this API key.

    :attrtype:`Application`

    """

    def make_self_link(self):
        return urljoin(typepad.client.endpoint, '/api-keys/%s.json' % self.api_key)

    @classmethod
    def get_by_api_key(cls, api_key):
        """Returns an `ApiKey` instance with the given consumer key.

        Asserts that the api_key parameter matches ^\w+$."""
        assert re.match('^\w+$', api_key), "invalid api_key parameter given"
        return cls.get('/api-keys/%s.json' % api_key)


class Asset(TypePadObject):

    """An item of content generated by a user."""

    _class_object_type = "Asset"

    author = fields.Object('User')
    """The user that created the selected asset.

    :attrtype:`User`

    """
    categories = fields.List(fields.Field())
    """A list of categories (strings) associated with the asset.

    :attrtype:`list`

    """
    categories_obj = fields.Link(ListObject, api_name='categories')
    comment_count = fields.Field(api_name='commentCount')
    """The number of comments that have been posted in the comment tree beneath
    this asset."""
    comment_tree = fields.Link(ListOf('CommentTreeItem'), api_name='comment-tree')
    comments = fields.Link(ListOf('Comment'))
    content = fields.Field()
    """The raw asset content.

    The ``textFormat`` property defines what format this data is in. This property
    is the field used to set the asset content in write operations; an asset
    posted in a group may have a content length of up to 10,000 bytes, while a
    post asset in a blog may have a content length of up to 65,000 bytes.

    """
    crosspost_accounts = fields.List(fields.Field(), api_name='crosspostAccounts')
    """A list of elsewhere account IDs to crosspost to.

    :attrtype:`list`

    """
    description = fields.Field()
    """The description of the asset."""
    excerpt = fields.Field()
    """A short, plain-text excerpt of the entry content.

    This is currently available only for `Post` assets.

    """
    favorite_count = fields.Field(api_name='favoriteCount')
    """The number of distinct users who have added this asset as a favorite."""
    favorites = fields.Link(ListOf('Favorite'))
    feedback_status = fields.Link('FeedbackStatus', api_name='feedback-status')
    groups = fields.List(fields.Field())
    """An array of strings containing the id URIs of the groups that this asset is
    mapped into, if any.

    At present an asset can only be added to one group, but this may change in
    future.


    :attrtype:`list`

    """
    id = fields.Field()
    """A URI that serves as a globally-unique id for the user.

    This can be used to recognise where the same user is returned in response to
    different requests, and as a mapping key for an application's local data
    store.

    """
    is_favorite_for_current_user = fields.Field(api_name='isFavoriteForCurrentUser')
    """``true`` if this asset is a favorite for the current user, or ``false``
    otherwise.

    This property is not set for responses to anonymous requests.

    """
    media_assets = fields.Link(ListOf('Asset'), api_name='media-assets')
    object_type = fields.Field(api_name='objectType')
    """The object type identifier"""
    object_types = fields.List(fields.Field(), api_name='objectTypes')
    """**Deprecated.** An array of object type identifier URIs.

    At the present time, only one object type is returned per asset, but this may
    be extended in future. Clients should scan this list and ignore any types that
    are not recognised. This list also includes appropriate type URIs as defined
    by the ActivityStrea.ms schema specification.


    :attrtype:`list`

    """
    permalink_url = fields.Field(api_name='permalinkUrl')
    """The URL which is considered to be this asset's permalink.

    This might be ``null`` if the asset does not have a permalink of its own (for
    example, if it's embedded in another asset), or if TypePad does not know its
    permalink.

    """
    publication_status = fields.Link('PublicationStatus', api_name='publication-status')
    published = fields.Datetime()
    """The time that the asset was created, as an RFC3339 timestamp.

    :attrtype:`datetime`

    """
    reblogs = fields.Link(ListOf('Post'))
    rendered_content = fields.Field(api_name='renderedContent')
    """The content of this asset rendered to HTML.

    This is currently available only for `Post` and `Page` assets.

    """
    source = fields.Object('AssetSource')
    """An object describing the site from which this asset was retrieved, for
    assets obtained from external feeds.

    :attrtype:`AssetSource`

    """
    summary = fields.Field()
    """For a media type of `Asset`, the HTML description or caption given by its
    author."""
    text_format = fields.Field(api_name='textFormat')
    """A keyword which indicates what formatting mode is used for the content of
    this asset.

    This can currently be "html" for assets whose content is HTML,
    "html_convert_linebreaks" for assets whose content is HTML with paragraph tags
    added automatically, or "markdown" for assets whose content is Markdown. Other
    formatting modes may be added in future. Applications which present assets for
    editing should use this property to present an appropriate editor.

    """
    title = fields.Field()
    """The title of the asset."""
    url_id = fields.Field(api_name='urlId')
    """A string containing the canonical identifier that can be used as the "id"
    for this object in URLs.

    However, this should not be used as a database key to avoid collisions when an
    application is switched to a different backend server; use the "id" property
    instead.

    """

    def make_self_link(self):
        return urljoin(typepad.client.endpoint, '/assets/%s.json' % self.url_id)

    @classmethod
    def get_by_url_id(cls, url_id, **kwargs):
        if url_id == '':
            raise ValueError("An url_id is required")
        obj = cls.get('/assets/%s.json' % url_id, **kwargs)
        obj.__dict__['url_id'] = url_id
        obj.__dict__['id'] = 'tag:api.typepad.com,2009:%s' % url_id
        return obj

    @property
    def actor(self):
        """This asset's author.

        This alias lets us use `Asset` instances interchangeably with `Event`
        instances in templates.
        """
        return self.author

    @property
    def asset_ref(self):
        """An `AssetRef` instance representing this asset."""
        return AssetRef(url_id=self.url_id,
                        ref=self.id,
                        author=self.author,
                        href='/assets/%s.json' % self.url_id,
                        type='application/json',
                        object_types=self.object_types)

    def __unicode__(self):
        return self.title or self.summary or self.content

    def primary_object_type(self):
        if not self.object_types: return None
        for object_type in self.object_types:
            return object_type
        return None


class AssetRef(TypePadObject):

    """A structure that refers to an asset without including its full
    content."""

    author = fields.Object('User')
    """The user that created the selected asset.

    :attrtype:`User`

    """
    href = fields.Field()
    """The URL at which a representation of the corresponding asset can be
    retrieved."""
    id = fields.Field()
    """A URI that serves as a globally-unique id for the asset.

    This matches the "id" property in the corresponding `Asset` object.

    """
    object_type = fields.Field(api_name='objectType')
    """The object type identifier"""
    object_types = fields.List(fields.Field(), api_name='objectTypes')
    """**Deprecated.** An array of object type identifier URIs.

    At the present time, only one object type is returned per asset, but this may
    be extended in future. Clients should scan this list and ignore any types that
    are not recognised. This list also includes appropriate type URIs as defined
    by the ActivityStrea.ms schema specification.


    :attrtype:`list`

    """
    type = fields.Field()
    """The MIME type of the representation at the URL given in the "href"
    property."""
    url_id = fields.Field(api_name='urlId')
    """A string containing the canonical identifier that can be used as the "id"
    for this object in URLs.

    However, this should not be used as a database key to avoid collisions when an
    application is switched to a different backend server such as the development
    server; use the "id" property instead. This matchies the "urlId" propert in
    the corresponding asset.

    """

    def reclass_for_data(self, data):
        """Returns ``False``.

        This method prevents `AssetRef` instances from being reclassed when
        updated from a data dictionary based on the dictionary's
        ``objectTypes`` member.

        """
        # AssetRefs are for any object type, so don't reclass them.
        return False


class AssetSource(TypePadObject):

    """Information about an `Asset` instance imported from another service."""

    by_user = fields.Field(api_name='byUser')
    """**Deprecated.** ``true`` if this content is considered to be created by its
    author, or ``false`` if it's actually someone else's content imported by the
    asset author."""
    permalink_url = fields.Field(api_name='permalinkUrl')
    """The URL which is considered to be this asset source's permalink."""
    provider = fields.Dict(fields.Field())
    """**Deprecated.** Description of the external service provider from which
    this content was imported.

    Contains "name", "icon", and "uri" properties.


    :attrtype:`dict`

    """


class AudioLink(TypePadObject):

    """A link to an audio recording."""

    duration = fields.Field()
    """An optional property representing the duration of the audio stream in
    seconds, if known."""
    url = fields.Field()
    """The URL for an MP3 representation of the audio stream."""


class AuthToken(TypePadObject):

    auth_token = fields.Field(api_name='authToken')
    """The actual auth token string, which is used as the access token when making
    an OAuth request."""
    target_object = fields.Object('TypePadObject', api_name='targetObject')
    """**Deprecated.** The root object to which this auth token grants access.

    This is a legacy field maintained for backwards compatibility with older
    clients. Auth tokens are no longer scoped to specific objects, so this value
    will be meaningless in any case except those where a specific object is
    returned to preserve some client behavior.


    :attrtype:`TypePadObject`

    """

    def make_self_link(self):
        # TODO: We don't have the API key, so we can't build a self link.
        return

    @classmethod
    def get_by_key_and_token(cls, api_key, auth_token):
        return cls.get('/auth-tokens/%s:%s.json' % (api_key, auth_token))

    target = renamed_property(old='target', new='target_object')


class Blog(TypePadObject):

    categories = fields.Link(ListOf('string'))
    commenting_settings = fields.Link('BlogCommentingSettings', api_name='commenting-settings')
    comments = fields.Link(ListOf('Comment'))
    crosspost_accounts = fields.Link(ListOf('Account'), api_name='crosspost-accounts')
    description = fields.Field()
    """The description of the blog as provided by its owner."""
    home_url = fields.Field(api_name='homeUrl')
    """The URL of the blog's home page."""
    id = fields.Field()
    """A URI that serves as a globally-unique id for the object.

    This can be used to recognise where the same user is returned in response to
    different requests, and as a mapping key for an application's local data
    store.

    """
    media_assets = fields.Link(ListOf('Asset'), api_name='media-assets')
    object_type = fields.Field(api_name='objectType')
    """The object type identifier"""
    object_types = fields.List(fields.Field(), api_name='objectTypes')
    """**Deprecated.** An array of object type identifier URIs.

    At the present time, only one object type is returned per object, but this may
    be extended in future. Clients should scan this list and ignore any types that
    are not recognized.


    :attrtype:`list`

    """
    owner = fields.Object('User')
    """The user that owns the blog.

    :attrtype:`User`

    """
    page_assets = fields.Link(ListOf('Page'), api_name='page-assets')
    post_assets = fields.Link(ListOf('Post'), api_name='post-assets')
    post_by_email_settings = fields.Link('PostByEmailAddress', api_name='post-by-email-settings')
    stats = fields.Link('BlogStats')
    title = fields.Field()
    """The title of the blog."""
    url_id = fields.Field(api_name='urlId')
    """A string containing the canonical identifier that can be used as the "id"
    for this object in URLs.

    However, this should not be used as a database key to avoid collisions when an
    application is switched to a different backend server; use the "id" property
    instead.

    """

    def make_self_link(self):
        return urljoin(typepad.client.endpoint, '/blogs/%s.json' % self.url_id)

    @classmethod
    def get_by_url_id(cls, url_id, **kwargs):
        if url_id == '':
            raise ValueError("An url_id is required")
        obj = cls.get('/blogs/%s.json' % url_id, **kwargs)
        obj.__dict__['url_id'] = url_id
        obj.__dict__['id'] = 'tag:api.typepad.com,2009:%s' % url_id
        return obj


class BlogCommentingSettings(TypePadObject):

    captcha_required = fields.Field(api_name='captchaRequired')
    """``true`` if this blog requires anonymous commenters to pass a CAPTCHA
    before submitting a comment."""
    email_address_required = fields.Field(api_name='emailAddressRequired')
    """``true`` if this blog requires anonymous comments to be submitted with an
    email address."""
    html_allowed = fields.Field(api_name='htmlAllowed')
    """``true`` if this blog allows commenters to use basic HTML formatting in
    comments."""
    moderation_enabled = fields.Field(api_name='moderationEnabled')
    """``true`` if this blog places new comments into a moderation queue for
    approval before they are displayed."""
    signin_allowed = fields.Field(api_name='signinAllowed')
    """``true`` if this blog allows users to sign in to comment.

    If ``false``, all new comments are anonymous.

    """
    signin_required = fields.Field(api_name='signinRequired')
    """``true`` if this blog requires users to be logged in in order to leave a
    comment.

    If ``false``, anonymous comments will be rejected.

    """
    time_limit = fields.Field(api_name='timeLimit')
    """Number of days after a post is published that comments will be allowed.

    Absent if this blog has no time limit for comments.

    """
    urls_auto_linked = fields.Field(api_name='urlsAutoLinked')
    """``true`` if comments in this blog will automatically have any bare URLs
    turned into links."""


class BlogStats(TypePadObject):

    daily_page_views = fields.Dict(fields.Field(), api_name='dailyPageViews')
    """A map containing the daily page views on the blog for the last 120 days.

    The keys of the map are dates in W3CDTF format, and the values are the integer
    number of page views on the blog for that date.


    :attrtype:`dict`

    """
    total_page_views = fields.Field(api_name='totalPageViews')
    """The total number of page views received by the blog for all time."""


class CommentTreeItem(TypePadObject):

    comment = fields.Object('Asset')
    """A comment asset in the tree

    :attrtype:`Asset`

    """
    depth = fields.Field()
    """How many levels deep this comment is in the comment hierarchy.

    If a given comment has a depth of 1 then all of the direct replies to that
    comment will have a depth of 2, and their replies will have depth 3, etc. 1
    indicates a direct reply to the root asset.

    """


class Endpoint(TypePadObject):

    action_endpoints = fields.List(fields.Object('Endpoint'), api_name='actionEndpoints')
    """For noun endpoints, an array of action endpoints that it supports.

    :attrtype:`list of Endpoint`

    """
    can_have_id = fields.Field(api_name='canHaveId')
    """For noun endpoints, true if an id part is accepted, or false if the noun
    may only be used alone."""
    can_omit_id = fields.Field(api_name='canOmitId')
    """For noun endpoints, true if the id part can be ommitted, or false if it is
    always required."""
    filter_endpoints = fields.List(fields.Object('Endpoint'), api_name='filterEndpoints')
    """For endpoints that return lists, an array of filters that can be appended
    to the endpoint.

    :attrtype:`list of Endpoint`

    """
    format_sensitive = fields.Field(api_name='formatSensitive')
    """true if this requires expects a format suffix, or false otherwise."""
    name = fields.Field()
    """The name of the noun, as it appears in URLs."""
    parameterized = fields.Field()
    """For filter endpoints, true if a parameter is required on the filter, or
    false if it's a boolean filter."""
    post_object_type = fields.Object('ObjectType', api_name='postObjectType')
    """The type of object that this endpoint accepts for POST operations.

    :attrtype:`ObjectType`

    """
    property_endpoints = fields.List(fields.Object('Endpoint'), api_name='propertyEndpoints')
    """For noun endpoints, an array of property endpoints that it supports.

    :attrtype:`list of Endpoint`

    """
    resource_object_type = fields.Object('ObjectType', api_name='resourceObjectType')
    """The type of object that this endpoint represents for GET, PUT and DELETE
    operations.

    This is not returned for action endpoints, since they do not represent
    resources.


    :attrtype:`ObjectType`

    """
    response_object_type = fields.Object('ObjectType', api_name='responseObjectType')
    """For action endpoints, the type of object that this endpoint returns on
    success.

    If the endpoint returns no payload on success, this property is null.


    :attrtype:`ObjectType`

    """
    supported_methods = fields.Dict(fields.Field(), api_name='supportedMethods')
    """A mapping whose keys are the HTTP method that this endpoint accepts and
    whose values are docstrings describing the result of each method.

    :attrtype:`dict`

    """
    supported_query_arguments = fields.List(fields.Field(), api_name='supportedQueryArguments')
    """The names of the query string arguments that this endpoint accepts.

    :attrtype:`list`

    """


class Entity(TypePadObject):

    id = fields.Field()
    """A URI that serves as a globally-unique id for the object.

    This can be used to recognise where the same user is returned in response to
    different requests, and as a mapping key for an application's local data
    store.

    """
    url_id = fields.Field(api_name='urlId')
    """A string containing the canonical identifier that can be used as the "id"
    for this object in URLs.

    However, this should not be used as a database key to avoid collisions when an
    application is switched to a different backend server; use the "id" property
    instead.

    """


class Event(TypePadObject):

    """An action that a user or group did.

    An event has an `actor`, which is the user or group that did the action; a
    set of `verbs` that describe what kind of action occured; and an `object`
    that is the object that the action was done to. In the current TypePad API
    implementation, only assets, users and groups can be the object of an
    event.

    """

    actor = fields.Object('User')
    """The user that did the action that the event describes.

    :attrtype:`User`

    """
    id = fields.Field()
    """A URI that serves as a globally-unique id for the user.

    This can be used to recognise where the same user is returned in response to
    different requests, and as a mapping key for an application's local data
    store.

    """
    object = fields.Object('TypePadObject')
    """The object that the action was done to.

    :attrtype:`TypePadObject`

    """
    published = fields.Datetime()
    url_id = fields.Field(api_name='urlId')
    """A string containing the canonical identifier that can be used as the "id"
    for this object in URLs.

    However, this should not be used as a database key to avoid collisions when an
    application is switched to a different backend server; use the "id" property
    instead.

    """
    verb = fields.List(fields.Field())
    """A string identifying the event verb (such as 'NewPost')

    :attrtype:`list`

    """
    verbs = fields.List(fields.Field())
    """**Deprecated.** An array of verb identifier URIs.

    At the present time, only one verb is returned, but this may be extended in
    future. Clients should scan this list and ignore any verbs that are not
    recognised. This list also includes appropriate verb URIs as defined by the
    ActivityStrea.ms schema specification.


    :attrtype:`list`

    """

    def make_self_link(self):
        return urljoin(typepad.client.endpoint, '/events/%s.json' % self.url_id)

    @classmethod
    def get_by_url_id(cls, url_id, **kwargs):
        if url_id == '':
            raise ValueError("An url_id is required")
        obj = cls.get('/events/%s.json' % url_id, **kwargs)
        obj.__dict__['url_id'] = url_id
        obj.__dict__['id'] = 'tag:api.typepad.com,2009:%s' % url_id
        return obj

    def __unicode__(self):
        return unicode(self.object)


class Favorite(TypePadObject):

    """A favorite of some other asset.

    Asserts that the user_id and asset_id parameter match ^\w+$."""

    _class_object_type = "Favorite"

    author = fields.Object('User')
    """The owner of this favorite.

    This is the user that marked the asset as a favorite, not the owner of the
    target asset.


    :attrtype:`User`

    """
    id = fields.Field()
    """A URI that serves as a globally-unique id for the favorite.

    This can be used to recognise where the same favorite is returned in response
    to different requests, and as a mapping key for an application's local data
    store.

    """
    in_reply_to = fields.Object('AssetRef', api_name='inReplyTo')
    """A reference to the asset that has been marked as a favorite.

    :attrtype:`AssetRef`

    """
    published = fields.Field()
    """The time that the favorite was created, as an RFC3339 timestamp."""
    url_id = fields.Field(api_name='urlId')
    """A string containing the canonical identifier that can be used as the "id"
    for this favorite in URLs.

    However, this should not be used as a database key to avoid collisions when an
    application is switched to a different backend server such as the development
    server; use the "id" property instead.

    """

    def make_self_link(self):
        return urljoin(typepad.client.endpoint, '/favorites/%s.json' % self.url_id)

    @classmethod
    def get_by_url_id(cls, url_id, **kwargs):
        if url_id == '':
            raise ValueError("An url_id is required")
        obj = cls.get('/favorites/%s.json' % url_id, **kwargs)
        obj.__dict__['url_id'] = url_id
        obj.__dict__['id'] = 'tag:api.typepad.com,2009:%s' % url_id
        return obj

    @classmethod
    def get_by_user_asset(cls, user_id, asset_id, **kwargs):
        assert re.match('^\w+$', user_id), "invalid user_id parameter given"
        assert re.match('^\w+$', asset_id), "invalid asset_id parameter given"
        return cls.get('/favorites/%s:%s.json' % (asset_id, user_id),
            **kwargs)

    @classmethod
    def head_by_user_asset(cls, *args, **kwargs):
        fav = cls.get_by_user_asset(*args, **kwargs)
        return fav.head()


class FeedbackStatus(TypePadObject):

    allow_comments = fields.Field(api_name='allowComments')
    """``true`` if this asset accepts comments, ``false`` otherwise"""
    allow_trackback = fields.Field(api_name='allowTrackback')
    """``true`` if this asset accepts pings, ``false`` otherwise"""
    show_comments = fields.Field(api_name='showComments')
    """``true`` if this asset displays comments, ``false`` otherwise"""


class ImageLink(TypePadObject, _ImageResizer):

    """A link to an image.

    Images hosted by TypePad can be resized with image sizing specs. See
    the `url_template` field and `at_size` method.

    """

    height = fields.Field()
    """The height of the original image in pixels.

    Omitted if TypePad does not know the dimensions of this image, for example if
    the image is not actually hosted on TypePad itself.

    """
    url = fields.Field()
    """The URL for the original (full-size) version of this image."""
    url_template = fields.Field(api_name='urlTemplate')
    """If TypePad is able to provide a scaled version of this image, a URL
    template which uses the placeholder ``{spec}`` to represent where to place a
    sizing spec as described above.

    Omitted if TypePad is unable to provide a scaled version of this image, for
    example if the image is not actually hosted on TypePad itself.

    """
    width = fields.Field()
    """The width of the original image in pixels.

    Omitted if TypePad does not know the dimensions of this image, for example if
    the image is not actually hosted on TypePad itself.

    """

    href = renamed_property(old='url', new='href')


class ObjectProperty(TypePadObject):

    doc_string = fields.Field(api_name='docString')
    """A human-readable documentation string for this property."""
    name = fields.Field()
    """The name of the property."""
    type = fields.Field()
    """The name of the type of this property."""


class ObjectType(TypePadObject):

    name = fields.Field()
    """The name of the type.

    Absent if this is an anonymous type representing the request or response of an
    action endpoint.

    """
    parent_type = fields.Field(api_name='parentType')
    """The name of the parent type, if any."""
    properties = fields.List(fields.Object('ObjectProperty'))
    """The properties of this type.

    :attrtype:`list of ObjectProperty`

    """


class PostByEmailAddress(TypePadObject):

    email_address = fields.Field(api_name='emailAddress')
    """A private email address for posting via email"""


class PublicationStatus(TypePadObject):

    """A container for the flags that represent an asset's publication status.

    Publication status is currently represented by two flags: published and
    spam. The published flag is false when an asset is held for moderation,
    and can be set to true to publish the asset. The spam flag is true when
    TypePad's spam filter has determined that an asset is spam, or when the
    asset has been marked as spam by a moderator.

    """

    draft = fields.Field()
    """``true`` if this asset is private, ``false`` otherwise"""
    publication_date = fields.Field(api_name='publicationDate')
    """Represents an asset's publication date (past or future)"""


class Relationship(TypePadObject):

    """The unidirectional relationship between a pair of entities.

    A Relationship can be between a user and a user (a contact relationship),
    or a user and a group (a membership). In either case, the relationship's
    status shows *all* the unidirectional relationships between the source and
    target entities.

    """

    created = fields.Dict(fields.Datetime())
    id = fields.Field()
    """A URI that serves as a globally-unique id for the relationship.

    This can be used to recognise where the same relationship is returned in
    response to different requests, and as a mapping key for an application's
    local data store.

    """
    source = fields.Object('Entity')
    """The source entity, the 'subject' of the relationship.

    :attrtype:`Entity`

    """
    status = fields.Object('RelationshipStatus')
    """A RelationshipStatus object describing the types of relationship that
    currently exist between the source and the target.

    :attrtype:`RelationshipStatus`

    """
    status_obj = fields.Link('RelationshipStatus', api_name='status')
    target = fields.Object('Entity')
    """The target entity, the 'object' of the relationship.

    :attrtype:`Entity`

    """
    url_id = fields.Field(api_name='urlId')
    """A string containing the canonical identifier that can be used as the "id"
    for this object in URLs.

    However, this should not be used as a database key to avoid collisions when an
    application is switched to a different backend server; use the "id" property
    instead.

    """

    def make_self_link(self):
        return urljoin(typepad.client.endpoint, '/relationships/%s.json' % self.url_id)

    @classmethod
    def get_by_url_id(cls, url_id, **kwargs):
        if url_id == '':
            raise ValueError("An url_id is required")
        obj = cls.get('/relationships/%s.json' % url_id, **kwargs)
        obj.__dict__['url_id'] = url_id
        obj.__dict__['id'] = 'tag:api.typepad.com,2009:%s' % url_id
        return obj

    def _rel_type_updater(uri):
        def update(self):
            rel_status = RelationshipStatus.get(self.status_obj._location, batch=False)
            if uri:
                rel_status.types = [uri]
            else:
                rel_status.types = []
            rel_status.put()
        return update

    block = _rel_type_updater("tag:api.typepad.com,2009:Blocked")
    unblock = _rel_type_updater(None)
    leave = _rel_type_updater(None)

    def _rel_type_checker(uri):
        def has_edge_with_uri(self):
            return uri in self.status.types
        return has_edge_with_uri

    is_member = _rel_type_checker("tag:api.typepad.com,2009:Member")
    is_admin = _rel_type_checker("tag:api.typepad.com,2009:Admin")
    is_blocked = _rel_type_checker("tag:api.typepad.com,2009:Blocked")


class RelationshipStatus(TypePadObject):

    """A representation of just the relationship types of a relationship,
    without the associated endpoints."""

    types = fields.List(fields.Field())
    """A list of strings containing relationship type URIs.

    :attrtype:`list`

    """


class UserProfile(TypePadObject):

    """Additional profile information about a TypePad user.

    This additional information is useful when showing information about a
    TypePad account directly, but is generally not required when linking to
    an ancillary TypePad account, such as the author of a post.

    """

    about_me = fields.Field(api_name='aboutMe')
    """The long-form description or bio, as a free-form string provided by the
    user."""
    avatar_link = fields.Object('ImageLink', api_name='avatarLink')
    """Link to this user's avatar (userpic) image.

    :attrtype:`ImageLink`

    """
    display_name = fields.Field(api_name='displayName')
    """The user's chosen display name."""
    email = fields.Field()
    follow_frame_content_url = fields.Field(api_name='followFrameContentUrl')
    """URL of a page which can be rendered in an iframe to produce a widget
    through which the remote user can follow this user.

    Should be rendered in an iframe that's 300 pixels wide and 125 pixels high.

    """
    gender = fields.Field()
    homepage_url = fields.Field(api_name='homepageUrl')
    """URL that the user has specified as an external website URL.

    ``null`` if the user has not provided a website URL.

    """
    id = fields.Field()
    """A URI that uniquely identifies the `User` associated with this
    `UserProfile`."""
    interests = fields.List(fields.Field())
    """A list of interests provided by the user and displayed on the user's
    profile page.

    :attrtype:`list`

    """
    location = fields.Field()
    """The location of the user, as a free-form string provided by the user."""
    membership_management_page_url = fields.Field(api_name='membershipManagementPageUrl')
    """URL of a page at which this user can manage group memberships.

    This is present only if the remote user has access to do this.

    """
    preferred_username = fields.Field(api_name='preferredUsername')
    """The name the user has chosen for use in his TypePad Profile URL.

    This can be used as the id in the URL to select this user, though it must not
    be used as a persistent key since it can be changed by the user at any time.

    """
    profile_edit_page_url = fields.Field(api_name='profileEditPageUrl')
    """URL of a page at which this user can edit the profile information attached
    to the user account.

    This is present only if the remote user has access to do this.

    """
    profile_page_url = fields.Field(api_name='profilePageUrl')
    """URL of the user's profile page."""
    url_id = fields.Field(api_name='urlId')
    """An identifier for this `UserProfile` that can be used in URLs.

    A user's `url_id` is unique only across groups in one TypePad environment, so
    you should use `id`, not `url_id`, to associate data with a `User` (or
    `UserProfile`). When constructing URLs to API resources in one particular
    TypePad environment, however, use `url_id`.

    """

    def make_self_link(self):
        return urljoin(typepad.client.endpoint, '/users/%s/profile.json' % self.url_id)

    @classmethod
    def get_by_url_id(cls, url_id, **kwargs):
        """Returns the `UserProfile` instance with the given URL identifier."""
        prof = cls.get('/users/%s/profile.json' % url_id, **kwargs)
        prof.__dict__['url_id'] = url_id
        return prof

    @property
    def user(self):
        """Returns a `User` instance for the TypePad member whose
        `UserProfile` this is."""
        return find_by_name('User').get_by_url_id(self.url_id)


class VideoLink(TypePadObject, _VideoResizer):

    """A link to a web video."""

    embed_code = fields.Field(api_name='embedCode')
    """An opaque HTML fragment which, when embedded in a HTML page, will provide
    an inline player for the video."""
    permalink_url = fields.Field(api_name='permalinkUrl')
    """A URL to the HTML permalink page of the video.

    Use this field to specify the video when posting a new `Video` asset. When
    requesting an existing `Video` instance from the API, `permalink_url` will be
    ``None``.

    """

    @property
    def html(self):
        import logging
        logging.getLogger("typepad.api").warn(
            '%s.html is deprecated; use %s.embed_code instead' % (self.__class__.__name__, self.__class__.__name__))
        return self.embed_code


class Application(Entity):

    """An application that can authenticate to the TypePad API using OAuth.

    An application is identified by its OAuth consumer key, which in the case
    of a hosted group is the same as the identifier for the group itself.

    """

    _class_object_type = "Application"

    name = fields.Field()
    """The name of the application as provided by its developer."""
    oauth_access_token_url = fields.Field(api_name='oauthAccessTokenUrl')
    """The URL of the OAuth access token endpoint for this application."""
    oauth_authorization_url = fields.Field(api_name='oauthAuthorizationUrl')
    """The URL to send the user's browser to for the user authorization step."""
    oauth_identification_url = fields.Field(api_name='oauthIdentificationUrl')
    """The URL to send the user's browser to identify which user is logged in (the
    "signin" link)."""
    oauth_request_token_url = fields.Field(api_name='oauthRequestTokenUrl')
    """The URL of the OAuth request token endpoint for this application."""
    object_type = fields.Field(api_name='objectType')
    """The object type identifier"""
    object_types = fields.List(fields.Field(), api_name='objectTypes')
    """**Deprecated.** The object types for this object.

    This set will contain the string ``tag:api.typepad.com,2009:Application`` for
    an application object.


    :attrtype:`list`

    """
    session_sync_script_url = fields.Field(api_name='sessionSyncScriptUrl')
    """The URL of the session sync script."""
    signout_url = fields.Field(api_name='signoutUrl')
    """The URL to send the user's browser to in order to sign out of TypePad."""
    user_flyouts_script_url = fields.Field(api_name='userFlyoutsScriptUrl')
    """The URL of a script to embed to enable the user flyouts functionality."""

    def make_self_link(self):
        return urljoin(typepad.client.endpoint, '/applications/%s.json' % self.url_id)

    @classmethod
    def get_by_url_id(cls, url_id, **kwargs):
        if url_id == '':
            raise ValueError("An url_id is required")
        obj = cls.get('/applications/%s.json' % url_id, **kwargs)
        obj.__dict__['url_id'] = url_id
        obj.__dict__['id'] = 'tag:api.typepad.com,2009:%s' % url_id
        return obj

    @classmethod
    def get_by_api_key(cls, api_key, **kwargs):
        """Returns an `Application` instance by the API key.

        Asserts that the api_key parameter matches ^\w+$."""
        assert re.match('^\w+$', api_key), "invalid api_key parameter given"
        import logging
        logging.getLogger("typepad.api").warn(
            '%s.get_by_api_key is deprecated' % cls.__name__)
        return cls.get('/applications/%s.json' % api_key, **kwargs)

    @property
    def browser_upload_endpoint(self):
        """The endpoint to use for uploading file assets directly to
        TypePad."""
        return urljoin(typepad.client.endpoint, '/browser-upload.json')

    @property
    def user_flyouts_script(self):
        import logging
        logging.getLogger("typepad.api").warn(
            '%s.user_flyouts_script is deprecated; use %s.user_flyouts_script_url instead' % (self.__class__.__name__, self.__class__.__name__))
        return self.user_flyouts_script_url


class Audio(Asset):

    """An entry in a blog."""

    _class_object_type = "Audio"

    audio_link = fields.Object('AudioLink', api_name='audioLink')
    """A link to the actual audio stream that provides the primary content for
    this asset.

    :attrtype:`AudioLink`

    """


class Comment(Asset):

    """A text comment posted in reply to some other asset."""

    _class_object_type = "Comment"

    in_reply_to = fields.Object('AssetRef', api_name='inReplyTo')
    """A reference to the asset that this comment is in reply to.

    :attrtype:`AssetRef`

    """
    publication_status = fields.Object('PublicationStatus', api_name='publicationStatus')
    """**Editable.** An object describing the visibility status and publication
    date for this page.

    Only visibility status is editable.


    :attrtype:`PublicationStatus`

    """


class CommentPreview(Asset):

    in_reply_to = fields.Object('AssetRef', api_name='inReplyTo')
    """A reference to the asset that this comment is in reply to.

    :attrtype:`AssetRef`

    """
    publication_status = fields.Object('PublicationStatus', api_name='publicationStatus')
    """**Editable.** An object describing the visibility status and publication
    date for this page.

    Only visibility status is editable.


    :attrtype:`PublicationStatus`

    """


class Group(Entity):

    """A group that users can join, and to which users can post assets.

    TypePad API social applications are represented as groups.

    """

    _class_object_type = "Group"

    audio_assets = fields.Link(ListOf('Audio'), api_name='audio-assets')
    avatar_link = fields.Object('ImageLink', api_name='avatarLink')
    """Link to this group's avatar (userpic) image.

    :attrtype:`ImageLink`

    """
    display_name = fields.Field(api_name='displayName')
    """The display name set by the group's owner."""
    events = fields.Link(ListOf('Event'))
    link_assets = fields.Link(ListOf('Link'), api_name='link-assets')
    memberships = fields.Link(ListOf('Relationship'))
    object_type = fields.Field(api_name='objectType')
    """The object type identifier"""
    object_types = fields.List(fields.Field(), api_name='objectTypes')
    """**Deprecated.** An array of object type identifier URIs.

    :attrtype:`list`

    """
    photo_assets = fields.Link(ListOf('Photo'), api_name='photo-assets')
    post_assets = fields.Link(ListOf('Post'), api_name='post-assets')
    site_url = fields.Field(api_name='siteUrl')
    """The URL of this group's main website."""
    tagline = fields.Field()
    """A tagline describing the group, set by the group's owner."""
    video_assets = fields.Link(ListOf('Video'), api_name='video-assets')

    def make_self_link(self):
        return urljoin(typepad.client.endpoint, '/groups/%s.json' % self.url_id)

    @classmethod
    def get_by_url_id(cls, url_id, **kwargs):
        if url_id == '':
            raise ValueError("An url_id is required")
        obj = cls.get('/groups/%s.json' % url_id, **kwargs)
        obj.__dict__['url_id'] = url_id
        obj.__dict__['id'] = 'tag:api.typepad.com,2009:%s' % url_id
        return obj


class Link(Asset):

    """A shared link to some URL."""

    _class_object_type = "Link"

    target_url = fields.Field(api_name='targetUrl')
    """The URL that is the target of this link."""


class Page(Asset):

    embedded_image_links = fields.List(fields.Object('ImageLink'), api_name='embeddedImageLinks')
    """A list of links to the images that are embedded within the content of this
    page.

    :attrtype:`list of ImageLink`

    """
    feedback_status = fields.Object('FeedbackStatus', api_name='feedbackStatus')
    """**Editable.** An object describing the comment and trackback behavior for
    this page.

    :attrtype:`FeedbackStatus`

    """
    filename = fields.Field()
    """**Editable.** The base name of the page, used to create the permalinkUrl."""
    publication_status = fields.Object('PublicationStatus', api_name='publicationStatus')
    """**Editable.** An object describing the draft status and publication date
    for this page.

    :attrtype:`PublicationStatus`

    """


class Photo(Asset):

    """An entry in a blog."""

    _class_object_type = "Photo"

    image_link = fields.Object('ImageLink', api_name='imageLink')
    """A link to the image that this Photo asset represents.

    :attrtype:`ImageLink`

    """


class Post(Asset):

    """An entry in a blog."""

    _class_object_type = "Post"

    categories = fields.List(fields.Field())
    """**Editable.** A list of categories associated with the post.

    :attrtype:`list`

    """
    embedded_audio_links = fields.List(fields.Object('AudioLink'), api_name='embeddedAudioLinks')
    """A list of links to the audios that are embedded within the content of this
    post.

    :attrtype:`list of AudioLink`

    """
    embedded_image_links = fields.List(fields.Object('ImageLink'), api_name='embeddedImageLinks')
    """A list of links to the images that are embedded within the content of this
    post.

    :attrtype:`list of ImageLink`

    """
    embedded_video_links = fields.List(fields.Object('VideoLink'), api_name='embeddedVideoLinks')
    """A list of links to the videos that are embedded within the content of this
    post.

    :attrtype:`list of VideoLink`

    """
    feedback_status = fields.Object('FeedbackStatus', api_name='feedbackStatus')
    """**Editable.** An object describing the comment and trackback behavior for
    this post.

    :attrtype:`FeedbackStatus`

    """
    filename = fields.Field()
    """**Editable.** The base name of the post, used to create the permalinkUri."""
    publication_status = fields.Object('PublicationStatus', api_name='publicationStatus')
    """**Editable.** An object describing the draft status and publication date
    for this post.

    :attrtype:`PublicationStatus`

    """
    reblog_count = fields.Field(api_name='reblogCount')
    """The number of reblogs that have been posted of this post."""
    reblog_of = fields.Object('AssetRef', api_name='reblogOf')
    """A reference to the post that this post was reblogged from.

    :attrtype:`AssetRef`

    """


class User(Entity):

    """A TypePad user.

    This includes those who own TypePad blogs, those who use TypePad Connect
    and registered commenters who have either created a TypePad account or
    signed in with OpenID.

    """

    _class_object_type = "User"

    avatar_link = fields.Object('ImageLink', api_name='avatarLink')
    """Link to this user's avatar (userpic) image.

    :attrtype:`ImageLink`

    """
    blogs = fields.Link(ListOf('Blog'))
    display_name = fields.Field(api_name='displayName')
    """The user's chosen display name."""
    elsewhere_accounts = fields.Link(ListOf('Account'), api_name='elsewhere-accounts')
    email = fields.Field()
    events = fields.Link(ListOf('Event'))
    favorites = fields.Link(ListOf('Favorite'))
    gender = fields.Field()
    interests = fields.List(fields.Field())
    """**Deprecated.** A list of interests provided by the user and displayed on
    the user's profile page.

    This property will go away in future, since it has moved to the `UserProfile`
    object type, which can be retrieved from ``/users/{id}/profile``.


    :attrtype:`list`

    """
    location = fields.Field()
    """**Deprecated.** The location of the user, as a free-form string provided by
    the user.

    This property will go away in future, since it has moved to the `UserProfile`
    object type, which can be retrieved from ``/users/{id}/profile``.

    """
    memberships = fields.Link(ListOf('Relationship'))
    notifications = fields.Link(ListOf('Event'))
    object_type = fields.Field(api_name='objectType')
    """The object type identifier"""
    object_types = fields.List(fields.Field(), api_name='objectTypes')
    """**Deprecated.** An array of object type identifier URIs.

    :attrtype:`list`

    """
    preferred_username = fields.Field(api_name='preferredUsername')
    """The name the user has chosen for use in his TypePad Profile URL.

    This can be used as the id in the URL to select this user, though it must not
    be used as a persistent key since it can be changed by the user at any time.

    """
    profile = fields.Link('UserProfile')
    profile_page_url = fields.Field(api_name='profilePageUrl')
    """URL of the user's profile page."""
    relationships = fields.Link(ListOf('Relationship'))

    def make_self_link(self):
        return urljoin(typepad.client.endpoint, '/users/%s.json' % self.url_id)

    @classmethod
    def get_by_url_id(cls, url_id, **kwargs):
        if url_id == '':
            raise ValueError("An url_id is required")
        obj = cls.get('/users/%s.json' % url_id, **kwargs)
        obj.__dict__['url_id'] = url_id
        obj.__dict__['id'] = 'tag:api.typepad.com,2009:%s' % url_id
        return obj

    @classmethod
    def get_self(cls, **kwargs):
        """Returns a `User` instance representing the account as whom the
        client library is authenticating."""
        return cls.get('/users/@self.json', **kwargs)


class Video(Asset):

    """An entry in a blog."""

    _class_object_type = "Video"

    preview_image_link = fields.Object('ImageLink', api_name='previewImageLink')
    """A link to an image which serves as a preview or poster frame for this
    video.

    Might be omitted if such an image is not available.


    :attrtype:`ImageLink`

    """
    video_link = fields.Object('VideoLink', api_name='videoLink')
    """A link to the actual video that provides the primary content for this
    asset.

    :attrtype:`VideoLink`

    """


browser_upload = BrowserUploadEndpoint()
